#!/usr/bin/env node

/**
 * Basic MCP Server Example
 *
 * This is a minimal MCP server that demonstrates hot-reload functionality.
 * Try modifying the tools array or descriptions to see hot-reload in action!
 */

const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false,
});

console.error("[Basic Server] Starting up...");

rl.on("line", (line) => {
  try {
    const message = JSON.parse(line.trim());

    if (message.method === "initialize") {
      const response = {
        jsonrpc: "2.0",
        id: message.id,
        result: {
          protocolVersion: "2024-11-05",
          capabilities: {
            tools: {},
          },
          serverInfo: {
            name: "basic-example-server",
            version: "1.0.0",
          },
        },
      };
      console.log(JSON.stringify(response));
    } else if (message.method === "tools/list") {
      // Try adding/removing tools here to test hot-reload!
      const tools = [
        {
          name: "hello_world",
          description: "Says hello to the world - try changing this description!",
          inputSchema: {
            type: "object",
            properties: {
              name: {
                type: "string",
                description: "Name to greet",
              },
            },
          },
        },
        {
          name: "get_timestamp",
          description: "Returns the current timestamp",
          inputSchema: {
            type: "object",
            properties: {},
          },
        },
      ];

      const response = {
        jsonrpc: "2.0",
        id: message.id,
        result: { tools },
      };
      console.log(JSON.stringify(response));
    } else if (message.method === "tools/call") {
      const toolName = message.params?.name;

      if (toolName === "hello_world") {
        const name = message.params?.arguments?.name || "World";
        const response = {
          jsonrpc: "2.0",
          id: message.id,
          result: {
            content: [{
              type: "text",
              text: `Hello, ${name}! This message was generated by the basic example server.`,
            }],
          },
        };
        console.log(JSON.stringify(response));
      } else if (toolName === "get_timestamp") {
        const response = {
          jsonrpc: "2.0",
          id: message.id,
          result: {
            content: [{
              type: "text",
              text: `Current timestamp: ${new Date().toISOString()}`,
            }],
          },
        };
        console.log(JSON.stringify(response));
      } else {
        const response = {
          jsonrpc: "2.0",
          id: message.id,
          error: {
            code: -32601,
            message: `Unknown tool: ${toolName}`,
          },
        };
        console.log(JSON.stringify(response));
      }
    } else {
      const response = {
        jsonrpc: "2.0",
        id: message.id,
        error: {
          code: -32601,
          message: `Method not found: ${message.method}`,
        },
      };
      console.log(JSON.stringify(response));
    }
  } catch (error) {
    console.error(`[Basic Server] Parse error: ${error.message}`);
  }
});

// Handle graceful shutdown
process.on("SIGTERM", () => {
  console.error("[Basic Server] Received SIGTERM, shutting down...");
  process.exit(0);
});

process.on("SIGINT", () => {
  console.error("[Basic Server] Received SIGINT, shutting down...");
  process.exit(0);
});

console.error("[Basic Server] Ready to receive requests!");
