File Path|Line|Issue Type|Risk|Description|Evidence|Suggested Fix
src/extensions/large-response-handler/tests/providers.ts|103|Stateful Singleton|HIGH|LRHTestUtilitiesImpl has duckDBMock = new Map() and mockDatasets = []|These collections accumulate data across tests. Interface has reset() method but it's NEVER CALLED in tests|Add afterEach hook to call reset() method or use TestContainer.reset()
src/extensions/large-response-handler/tests/providers.ts|220|Stateful Singleton|HIGH|DuckDBMockImpl has queryResults = new Map() and datasets = []|Same pattern as above - stateful singleton with no cleanup between tests|Add afterEach hook to call reset() method or use TestContainer.reset()
src/testing/TestContainer.ts|17|DI Configuration|HIGH|TestContainer uses defaultScope: 'Singleton'|All @injectable classes become singletons that persist across entire test suite|Change default scope to 'Transient' for tests or reset container in global afterEach
N/A|N/A|Missing Container Reset|HIGH|No test file calls TestContainer.reset()|TestContainer.reset() method exists but is never used, allowing state to leak between all tests|Add global afterEach(() => TestContainer.getInstance().reset()) in test setup
tests/integration/docker_watch_decoupling.test.ts|17-18|Event Handler Leak|MEDIUM|docker.on('error') and docker.on('exit') without cleanup|Event handlers added in isDockerAvailable() but never removed|Store handlers and remove in cleanup or use once() instead of on()
tests/integration/docker_watch_decoupling.test.ts|39|Event Handler Leak|MEDIUM|rl.on('line') in MCP_SERVER_SCRIPT without cleanup|Global readline listener in test script|Script is ephemeral so low impact, but consider using once() for single responses
tests/integration/docker_watch_decoupling.test.ts|80|Event Handler Leak|MEDIUM|process.on('SIGTERM') in test script|Global process listener added|Script is ephemeral so low impact, but sets bad pattern
tests/integration/docker_watch_decoupling.test.ts|163,168,172|Event Handler Leak|MEDIUM|Multiple mcpmonProcess listeners without explicit removal|mcpmonProcess.on('error'), stdout.on('data'), stderr.on('data')|Process is killed in afterEach which removes listeners, but explicit cleanup would be cleaner
tests/integration/node_implementations.test.ts|359|Event Handler Leak|LOW|process.stdin.on('data') in test script|Global stdin listener|Script is ephemeral and exits quickly, minimal risk
tests/integration/cli.test.ts|63|Event Handler Leak|LOW|process.stdin.on('data') in test script|Global stdin listener|Script is ephemeral and exits quickly, minimal risk
src/testing/e2e/MCPClientSimulator.ts|153-154|Mock State Management|MEDIUM|MockMCPStream has pendingOperations and lastError state|Added complex state tracking to fix specific tests but broke others|Revert to stateless mock, handle error state in MCPClientSimulator instead
tests/behavior/backward_compatibility.test.ts|186,199,386|Global State Modification|LOW|process.env.MCPMON_WATCH modifications|Tests modify process.env but do clean up (line 388)|Current cleanup is adequate but consider using jest.spyOn for safer mocking
src/extensions/large-response-handler/tests/index.ts|27|Decorator Conflict|MEDIUM|Double @injectable decorator with @TestContainer.register|TestContainer.register already applies @injectable internally|Remove explicit @injectable decorator when using @TestContainer.register
tests/extensions/large-response-handler-di.test.ts|15-40|Missing DI Setup|HIGH|Test creates mock objects but doesn't properly inject them|Manual mock creation without proper DI container setup|Use TestContainer to properly inject dependencies instead of manual mocks
tests/extensions/large-response-handler-streaming.test.ts|84|Timing Dependency|LOW|Test expects stats.duration > 0 but gets 0 due to synchronous execution|Missing delay between operations causes 0ms duration|Add await new Promise(resolve => setTimeout(resolve, 1)) between operations

## SUMMARY
Total Issues Found: 15
- HIGH Risk: 5 issues (Stateful singletons, missing DI reset)
- MEDIUM Risk: 7 issues (Event handler leaks, mock complexity)
- LOW Risk: 3 issues (Ephemeral scripts, adequate cleanup)

## PRIORITY FIXES
1. Add global afterEach(() => TestContainer.getInstance().reset()) - This single fix addresses most HIGH risk issues
2. Call reset() on stateful providers in test teardown
3. Replace complex MockMCPStream state with simpler client-side state management
4. Add explicit removeListener() calls for non-ephemeral event handlers